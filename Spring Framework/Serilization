Q. How Spring Serialiaze and Deserialise Json request to RequestBody Java object.

In Spring, you can use the MappingJackson2HttpMessageConverter class to convert a JSON request
body into a Java object and back again. This class is automatically registered by Spring Boot when
you include the jackson-databind dependency in your project.

Here's an example of how you can use MappingJackson2HttpMessageConverter to deserialize a JSON
request body into a Java object:

@RestController
public class MyController {
    @PostMapping("/myEndpoint")
    public ResponseEntity<MyResponse> myEndpoint(@RequestBody MyRequest request) {
        // The request object will be automatically deserialized from the JSON request body
        // ...
    }
}

To serialize a Java object into a JSON response body, you can use the ObjectMapper class provided by
Jackson to convert the object into a JSON string, and then return it as the response body:

@RestController
public class MyController {
    @GetMapping("/myEndpoint")
    public ResponseEntity<String> myEndpoint() {
        MyResponse response = new MyResponse();
        // Set properties on the response object
        // ...

        ObjectMapper mapper = new ObjectMapper();
        String json = mapper.writeValueAsString(response);
        return ResponseEntity.ok(json);
    }
}


Alternatively, you can use the MappingJackson2HttpMessageConverter to serialize the object automatically:

@RestController
public class MyController {
    @Autowired
    private MappingJackson2HttpMessageConverter jacksonConverter;

    @GetMapping("/myEndpoint")
    public ResponseEntity<MyResponse> myEndpoint() {
        MyResponse response = new MyResponse();
        // Set properties on the response object
        // ...

        return new ResponseEntity<>(response, HttpStatus.OK);
    }
}

The MappingJackson2HttpMessageConverter will automatically convert the MyResponse object into
a JSON string and set it as the response body.

****************************************************************************************************************

Q. Only Declaration of Autowired     private MappingJackson2HttpMessageConverter jacksonConverter;
is enough here? Everything else will happen automatically?

Yes, declaring an @Autowired private field for MappingJackson2HttpMessageConverter and not
initializing it is sufficient to have it automatically injected by the Spring framework.
This will allow you to use the jacksonConverter field to serialize objects into JSON and set them as
the response body.

Here's an example of how you can use the jacksonConverter field to serialize a Java object and set it
as the response body:

@RestController
public class MyController {
    @Autowired
    private MappingJackson2HttpMessageConverter jacksonConverter;

    @GetMapping("/myEndpoint")
    public ResponseEntity<String> myEndpoint() {
        MyResponse response = new MyResponse();
        // Set properties on the response object
        // ...

        return new ResponseEntity<>(response, HttpStatus.OK);
    }
}

The MappingJackson2HttpMessageConverter will automatically convert the MyResponse object into a JSON
string and set it as the response body.

It's also worth noting that you can use the MappingJackson2HttpMessageConverter to deserialize
JSON request bodies into Java objects as well. To do this, you can annotate the method parameter
with @RequestBody and the MappingJackson2HttpMessageConverter will automatically deserialize the JSON
request body into the specified object type.

@RestController
public class MyController {
    @Autowired
    private MappingJackson2HttpMessageConverter jacksonConverter;

    @PostMapping("/myEndpoint")
    public ResponseEntity<MyResponse> myEndpoint(@RequestBody MyRequest request) {
        // The request object will be automatically deserialized from the JSON request body
        // ...
    }
}

****************************************************************************************************************

Q. I havent done this in SPringboot, Does tt happens automatically in SB?

Yes, when you include the spring-boot-starter-web dependency in your Spring Boot project,
the MappingJackson2HttpMessageConverter class is automatically registered as a message converter
and can be used to convert between Java objects and JSON.

This means that you don't need to manually configure the MappingJackson2HttpMessageConverter or
declare an @Autowired field for it in order to use it. Instead, you can simply use the @RequestBody
and @ResponseBody annotations to automatically convert between JSON and Java objects in your
controller methods.

For example, to deserialize a JSON request body into a Java object, you can annotate the method
parameter with @RequestBody:

@RestController
public class MyController {
    @PostMapping("/myEndpoint")
    public ResponseEntity<MyResponse> myEndpoint(@RequestBody MyRequest request) {
        // The request object will be automatically deserialized from the JSON request body
        // ...
    }
}

To serialize a Java object into a JSON response body, you can annotate the method return value with
@ResponseBody:

@RestController
public class MyController {
    @GetMapping("/myEndpoint")
    @ResponseBody
    public MyResponse myEndpoint() {
        MyResponse response = new MyResponse();
        // Set properties on the response object
        // ...

        return response;
    }
}

The MappingJackson2HttpMessageConverter will automatically convert the MyResponse object into a JSON
string and set it as the response body.

****************************************************************************************************************

Q. I have used ResponseEntity  instead of annotating Response method to @ResponseBody

The ResponseEntity class is a convenient way to create an HTTP response with a custom status code,
headers, and body. It can be used in place of the @ResponseBody annotation to set the response body
and specify the response status code.

Here's an example of using ResponseEntity to return a custom response with a JSON body and a
200 OK status code:

@RestController
public class MyController {
    @GetMapping("/myEndpoint")
    public ResponseEntity<MyResponse> myEndpoint() {
        MyResponse response = new MyResponse();
        // Set properties on the response object
        // ...

        return new ResponseEntity<>(response, HttpStatus.OK);
    }
}

This will serialize the MyResponse object into a JSON string and set it as the response body, with a
status code of 200 OK.

You can also use the ResponseEntity class to set custom headers and specify a different status code.
For example, to return a 201 Created status code with a Location header, you could do the following:

@RestController
public class MyController {
    @PostMapping("/myEndpoint")
    public ResponseEntity<MyResponse> myEndpoint(@RequestBody MyRequest request) {
        MyResponse response = new MyResponse();
        // Set properties on the response object
        // ...

        HttpHeaders headers = new HttpHeaders();
        headers.setLocation(new URI("/myEndpoint/" + response.getId()));
        return new ResponseEntity<>(response, headers, HttpStatus.CREATED);
    }
}


This will return a 201 Created status code with a Location header containing the URL of the created
resource. The response body will be a JSON representation of the MyResponse object.



